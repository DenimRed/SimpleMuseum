buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

wrapper { distributionType = Wrapper.DistributionType.ALL }

version = '1.4.0'
group = 'denimred.simplemuseum'
archivesBaseName = 'simplemuseum'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'Client'

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'fml.earlyprogresswindow', 'false'

            args '--width', '1280', '--height', '720'

            mods {
                simplemuseum {
                    source sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName 'ClientAlt'
            args '--username', 'Alt'
        }

        if (project.hasProperty('mc_username')) {
            clientUser {
                parent minecraft.runs.client
                workingDirectory project.file('runs/' + name)
                taskName 'ClientUser'
                if (project.hasProperty('mc_uuid')) {
                    args '--uuid', project.getProperty('mc_uuid')
                }
                if (project.hasProperty('mc_accessToken')) {
                    args '--accessToken', project.getProperty('mc_accessToken')
                }
                args '--username', project.getProperty('mc_username')
                args '--width', '1280', '--height', '720'
            }
        }

        server {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'Server'

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args 'nogui'

            mods {
                simplemuseum {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('runs/' + name)
            singleInstance true
            taskName 'Data'

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'simplemuseum', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                simplemuseum {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDirs file("src/generated/resources")
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    flatDir name: 'libs', dirs: 'libs'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    // GeckoLib
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.39')
    // CryptMaster
    implementation fg.deobf('blank:cryptmaster:0.3.2-forge')
    runtimeOnly fg.deobf('blank:architectury:1.8.131-forge')
    runtimeOnly "org.jetbrains.kotlin:kotlin-stdlib:1.4.31"
    // http://www.jhlabs.com/ip/filters/index.html (For wacky texture datagen)
    implementation ":Filters:"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    exclude '.cache/**', '**/*.bbmodel', '**/*.pdn'

    manifest {
        attributes([
                "Specification-Title"     : "simplemuseum",
                "Specification-Vendor"    : "denimred",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "denimred",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}